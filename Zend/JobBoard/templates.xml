<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="php" deleted="false" description="ZF form element" enabled="true" name="zffe">$$this-&gt;addElement('${input_type}', '${input_id}', array(&#13;
    'label'      =&gt; '${input_label}',&#13;
    'required'   =&gt; ${is_required},&#13;
    'ignore'     =&gt; ${is_ignored},&#13;
    'filters'    =&gt; array('${filter_1}', '${filter_2}'),&#13;
    'validators' =&gt; array(&#13;
        '${validator_1}', array('validator' =&gt; '${validator_2}', 'options' =&gt; array(${validator_2_options})),&#13;
    )&#13;
));&#13;
&#13;
${cursor}</template><template autoinsert="true" context="php" deleted="false" description="Contents of a Zend Framework mapper class" enabled="true" name="zfmapper">protected $$_dbTable;&#13;
 &#13;
public function setDbTable($$dbTable)&#13;
{&#13;
    if (is_string($$dbTable)) {&#13;
        $$dbTable = new $$dbTable();&#13;
    }&#13;
    if (!$$dbTable instanceof Zend_Db_Table_Abstract) {&#13;
        throw new Exception('Invalid table data gateway provided');&#13;
    }&#13;
    $$this-&gt;_dbTable = $$dbTable;&#13;
    return $$this;&#13;
}&#13;
 &#13;
public function getDbTable()&#13;
{&#13;
    if (null === $$this-&gt;_dbTable) {&#13;
        $$this-&gt;setDbTable('Application_Model_DbTable_${ClassNameCamelCase}');&#13;
    }&#13;
    return $$this-&gt;_dbTable;&#13;
}&#13;
 &#13;
public function save(Application_Model_${ClassNameCamelCase} $$${class_name_lowercase})&#13;
{&#13;
    $$data = array(&#13;
        '${field_1_lowercase}'   =&gt; $$${class_name_lowercase}-&gt;get${Field1CamelCase}(),&#13;
        '${field_2_lowercase}' =&gt; $$${class_name_lowercase}-&gt;get${Field2CamelCase}(),&#13;
        '${field_3_lowercase}' =&gt; ${cursor},&#13;
        /* Add more fields here */&#13;
    );&#13;
 &#13;
    if (null === ($$id = $$${class_name_lowercase}-&gt;getId())) {&#13;
        unset($$data['id']);&#13;
        $$this-&gt;getDbTable()-&gt;insert($$data);&#13;
    } else {&#13;
        $$this-&gt;getDbTable()-&gt;update($$data, array('id = ?' =&gt; $$id));&#13;
    }&#13;
}&#13;
 &#13;
public function find($$id, Application_Model_${ClassNameCamelCase} $$${class_name_lowercase})&#13;
{&#13;
    $$result = $$this-&gt;getDbTable()-&gt;find($$id);&#13;
    if (0 == count($$result)) {&#13;
        return;&#13;
    }&#13;
    $$row = $$result-&gt;current();&#13;
    $$${class_name_lowercase}-&gt;setId($$row-&gt;id)&#13;
              -&gt;set${Field1CamelCase}($$row-&gt;${field_1_lowercase})&#13;
              -&gt;set${Field2CamelCase}($$row-&gt;${field_2_lowercase})&#13;
              -&gt;set${Field3CamelCase}($$row-&gt;${field_3_lowercase});&#13;
              /* Add more fields here */&#13;
}&#13;
 &#13;
public function fetchAll()&#13;
{&#13;
    $$resultSet = $$this-&gt;getDbTable()-&gt;fetchAll();&#13;
    $$entries   = array();&#13;
    foreach ($$resultSet as $$row) {&#13;
        $$entry = new Application_Model_${ClassNameCamelCase}();&#13;
        $$entry-&gt;setId($$row-&gt;id)&#13;
              -&gt;set${Field1CamelCase}($$row-&gt;${field_1_lowercase})&#13;
              -&gt;set${Field2CamelCase}($$row-&gt;${field_2_lowercase})&#13;
              -&gt;set${Field3CamelCase}($$row-&gt;${field_3_lowercase});&#13;
              /* Add more fields here */&#13;
        $$entries[] = $$entry;&#13;
    }&#13;
    return $$entries;&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="ZF model field with getter and setter functions" enabled="true" name="zfmdf">protected $$_${field_name_lowercase};&#13;
&#13;
public function set${field_name_camelcase}($$${field_name_lowercase})&#13;
{&#13;
	$$this-&gt;_${field_name_lowercase} = (string) $$${field_name_lowercase};&#13;
	return $$this;&#13;
}&#13;
&#13;
public function get${field_name_camelcase}()&#13;
{&#13;
	return $$this-&gt;_${field_name_lowercase};&#13;
}&#13;
&#13;
${cursor}</template><template autoinsert="true" context="php" deleted="false" description="Zend Framework model" enabled="true" name="zfmodel">public function __construct(array $$options = null)&#13;
{&#13;
    if (is_array($$options)) {&#13;
        $$this-&gt;setOptions($$options);&#13;
    }&#13;
}&#13;
 &#13;
public function __set($$name, $$value)&#13;
{&#13;
    $$method = 'set' . $$name;&#13;
    if (('mapper' == $$name) || !method_exists($$this, $$method)) {&#13;
        throw new Exception('Invalid ${class_name_lowercase} property');&#13;
    }&#13;
    $$this-&gt;$$method($$value);&#13;
}&#13;
 &#13;
public function __get($$name)&#13;
{&#13;
    $$method = 'get' . $$name;&#13;
    if (('mapper' == $$name) || !method_exists($$this, $$method)) {&#13;
        throw new Exception('Invalid ${class_name_lowercase} property');&#13;
    }&#13;
    return $$this-&gt;$$method();&#13;
}&#13;
 &#13;
public function setOptions(array $$options)&#13;
{&#13;
    $$methods = get_class_methods($$this);&#13;
    foreach ($$options as $$key =&gt; $$value) {&#13;
        $$method = 'set' . ucfirst($$key);&#13;
        if (in_array($$method, $$methods)) {&#13;
            $$this-&gt;$$method($$value);&#13;
        }&#13;
    }&#13;
    return $$this;&#13;
}&#13;
&#13;
/* Add fields here */&#13;
&#13;
${cursor}</template><template autoinsert="true" context="php" deleted="false" description="ZF Mapper field save" enabled="true" name="zfmpsave">'${field_name_lowercase}' =&gt; $$${class_name_lowercase}-&gt;get${FieldNameCamelCase}(),&#13;
${cursor}&#13;
</template><template autoinsert="true" context="php" deleted="false" description="ZF Mapper field set" enabled="true" name="zfmpset">-&gt;set${FieldNameCamelCase}($$row-&gt;${field_name_lowercase})</template></templates>